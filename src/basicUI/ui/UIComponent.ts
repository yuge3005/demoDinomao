import { Component, OnInit, OnDestroy } from '@angular/core';
import { HttpRequest } from '../net/http-request';
import { TextureData } from '../img/texture-data';
import { LoadedUITextureDatas } from '../settings/LoadedUITextureDatas';

/**
 * @version: 1.0
 * @Author: Wayne Yu
 * @LastEditTime: 2021-12-28 16:30:57
 * @description: Abstract component, must be extends.any component extends this class, you need to set the assets for "textureurl" in its constructor, the assets can be generated by the "texture merge" tool.
 * @ 抽象组件，必须继承。继承该类的组件，在构造函数中，需指定组件的素材textureUrl，textureUrl素材，可用"Texture Merger"工具生成。
 * @ In most cases, don't override "ngOnInit" and "ngOnChanges", just initailize the UI items in method "initUI".
 * @ 不要覆盖ngOnInit,ngOnChanges方法，可以在"initUI"中初始化组件UI
 */
@Component({
  template: ''
})
export class UIComponent implements OnInit, OnDestroy{

  textureData!: TextureData;
  textureJson: any;
  textureUrl: string = "";

  /**
   * @type {*}
   * @memberof UIComponent
   * @description: It is used to assign a value to the [ngstyle] instruction and define the CSS style of the object
   * @ 用于给[ngStyle]指令赋值，定义物体的css样式
   */
  styles: any = {};

  /**
   * @type {*}
   * @memberof UIComponent
   * @description: Display Objects according to assets
   * @ 根据素材图片，显示的物体
   */
  ui: any = {};

  constructor() { }

  ngOnInit() {
    if( LoadedUITextureDatas.loadTexture[this.textureUrl] ){
      this.textureJson = LoadedUITextureDatas.loadTexture[this.textureUrl];
      this.afterGetTexture();
    }
    else{
      new HttpRequest().loadData( this.textureUrl, this.getTexture.bind( this ), "GET", "" );
    }
  }

  private getTexture( data: any ){
    LoadedUITextureDatas.loadTexture[this.textureUrl] = this.textureJson = data;
    this.afterGetTexture();
  }

  private afterGetTexture(){
    this.textureData = new TextureData();
    this.textureData.setFile( this.textureUrl.substr( 0, this.textureUrl.lastIndexOf( "/" ) + 1 ) + this.textureJson.file, this.textureJson.frames );

    this.initUI();
  }

  /**
   * @protected
   * @memberof UIComponent
   * @description: Initialize the component UI, and the subclass needs to override
   * @ 初始化组件UI,子类需覆盖
   */
  protected initUI(){
  }

  ngOnDestroy(): void {
  }
}
